
public class Queen {

	public static void main(String[] args) {
		
		SolveQueen puzzle = new SolveQueen();
		puzzle.printBoard();
		System.out.println("----------------------");
		
		//puzzle.markBoard(2, 3);
		puzzle.markBoard(0, 0);
		puzzle.printBoard();
		System.out.println(puzzle.threat(2, 1));
		//puzzle.solve(0);


	}
	
	
	public static class SolveQueen {
		
		static final int SIZE = 8;
		static final int QUEEN = 1;
		static final int EMPTY = 0;
		
		public int[][] board = new int[SIZE][SIZE];
		public SolveQueen () { };
		
		public boolean solve(int col) {
			System.out.println("---------Col: " + col);
			printBoard();
			
			if(col == board.length) 
				return true;
			
			//Go thru rows for this column 
			for(int row=0; row<board.length; row++) {
				
				if(!threat(row, col))
					markBoard(row, col);
				
				boolean status = solve(col +1);
				if(status == true){
					return true;
				}
				else {
					unMarkBoard(row,col);
				}
			}
			
			return false; //failed utterly. 
		}
		
		public void printBoard() {
			printMatrix(board);
		}
		
		//prints n by n matrix    
		public void printMatrix(int[][] matrix) {
			int cols = matrix[0].length;
			int rows = matrix.length;
			
			for(int i=0; i<rows; i++){
				for(int j=0; j<cols; j++) {
					 System.out.print(matrix[i][j] + " ");
				}
				System.out.println("");
			}
		}
		
		// Determines if queen is being threatened at row, col
		public boolean threat(int row, int col) {
			//check row
			for(int i=0; i<board.length; i++) {
				if(board[i][col] == QUEEN) return true;
			}
			
			//check cols
			for(int i=0; i<board.length; i++) {
				if(board[row][i] == QUEEN) return true;
			}
			
			//check diagonal 
			for(int i=0; i<board.length; i++) {
				if(board[i][i] == QUEEN)
					return true;
			}

			return false;
		}
		
		public void markBoard(int row, int col) {
			board[row][col] = QUEEN;
		}
		
		public void unMarkBoard(int row, int col) {
			board[row][col] = EMPTY;
		}
		
	}

}


